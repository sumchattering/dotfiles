#!/usr/bin/env bash

# function to automaticaly create a git commit
gcauto() {
	# check if we are on a branch
	if ! git symbolic-ref --short HEAD >/dev/null 2>&1; then
		echo "Not on a branch, aborting"
		return 1
	fi

	# check if we have any changes to commit
	if ! git status --porcelain | grep -q .; then
		echo "No changes to commit, aborting"
		return 1
	fi

	BRANCH_NAME=$(git symbolic-ref --short HEAD)
	BRANCH_NAME="${BRANCH_NAME##*/}"
	if [[ $BRANCH_NAME =~ ^(TRA|tra|Tra)-[[:digit:]]+.* ]]; then
		DESCRIPTION=$(echo "$BRANCH_NAME" | sed -E 's/(^(TRA|tra|Tra)-[[:digit:]]+)(.*)/\3/')
		# replace all non alphanumeric characters with spaces
		DESCRIPTION=$(echo "$DESCRIPTION" | sed -E 's/[^[:alnum:]]/ /g')
		FULL_DESCRIPTION="Some work on$DESCRIPTION"
		git commit -am "$FULL_DESCRIPTION"
	else
		git commit -am "Some updates"
	fi
}

# function to kill all docker processes
function kdo() {
	# check if not docker processes are running
	if ! ps ax | grep -i docker | egrep -iv 'grep|com.docker.vmnetd' >/dev/null 2>&1; then
		echo "No Docker processes running"
		return 0
	fi

	ps ax | grep -i docker | egrep -iv 'grep|com.docker.vmnetd' | awk '{print $1}' | xargs kill
	echo "Docker processes killed"
}

# function to start docker
function sdo() {
	# check if docker is already running
	if docker info >/dev/null 2>&1; then
		echo "Docker is already running"
		echo "Docker version: $(docker version --format '{{.Server.Version}}')"
		echo "Docker API version: $(docker version --format '{{.Server.APIVersion}}')"
		echo "Docker root directory: $(docker info --format '{{.DockerRootDir}}')"
		return 0
	fi

	echo "Starting Docker"
	open /Applications/Docker.app
	echo "Waiting for Docker to start"
	while ! docker info >/dev/null 2>&1; do
		sleep 1
	done
	echo "Docker started successfully"
	echo "Docker version: $(docker version --format '{{.Server.Version}}')"
	echo "Docker API version: $(docker version --format '{{.Server.APIVersion}}')"
	echo "Docker root directory: $(docker info --format '{{.DockerRootDir}}')"
}

# function to stop docker
function qdo() {
	# check if docker is running
	if ! docker info >/dev/null 2>&1; then
		echo "Docker is not running"
		return 0
	fi

	echo "Stopping Docker"
	osascript -e 'quit app "Docker"'
	echo "Waiting for Docker to stop"
	while docker info >/dev/null 2>&1; do
		sleep 1
	done
	echo "Docker stopped successfully"
}

function pip-install-save {
	pip install $1 && pip freeze | grep $1 >>requirements.txt
}

# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_"
}

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
	local tmpFile="${@%/}.tar"
	tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

	size=$(
		stat -f"%z" "${tmpFile}" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}" 2>/dev/null # GNU `stat`
	)

	local cmd=""
	if ((size < 52428800)) && hash zopfli 2>/dev/null; then
		# the .tar file is smaller than 50 MB and Zopfli is available; use it
		cmd="zopfli"
	else
		if hash pigz 2>/dev/null; then
			cmd="pigz"
		else
			cmd="gzip"
		fi
	fi

	echo "Compressing .tar ($((size / 1000)) kB) using \`${cmd}\`…"
	"${cmd}" -v "${tmpFile}" || return 1
	[ -f "${tmpFile}" ] && rm "${tmpFile}"

	zippedSize=$(
		stat -f"%z" "${tmpFile}.gz" 2>/dev/null # macOS `stat`
		stat -c"%s" "${tmpFile}.gz" 2>/dev/null # GNU `stat`
	)

	echo "${tmpFile}.gz ($((zippedSize / 1000)) kB) created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null >/dev/null 2>&1; then
		local arg=-sbh
	else
		local arg=-sh
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@"
	else
		du $arg .[^.]* ./*
	fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
	function diff() {
		git diff --no-index --color-words "$@"
	}
fi

# Create a data URL from a file
function dataurl() {
	local mimeType=$(file -b --mime-type "$1")
	if [[ $mimeType == text/* ]]; then
		mimeType="${mimeType};charset=utf-8"
	fi
	echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
	local port="${1:-4000}"
	local ip=$(ipconfig getifaddr en1)
	sleep 1 && open "http://${ip}:${port}/" &
	php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c <"$1")
	local gzipsize=$(gzip -c "$1" | wc -c)
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l)
	printf "orig: %d bytes\n" "$origsize"
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Run `dig` and display the most useful info
function digga() {
	dig +nocmd "$1" any +multiline +noall +answer
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
	if [ -z "${1}" ]; then
		echo "ERROR: No domain specified."
		return 1
	fi

	local domain="${1}"
	echo "Testing ${domain}…"
	echo "" # newline

	local tmp=$(echo -e "GET / HTTP/1.0\nEOT" |
		openssl s_client -connect "${domain}:443" -servername "${domain}" 2>&1)

	if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
		local certText=$(echo "${tmp}" |
			openssl x509 -text -certopt "no_aux, no_header, no_issuer, no_pubkey, \
			no_serial, no_sigdump, no_signame, no_validity, no_version")
		echo "Common Name:"
		echo "" # newline
		echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//" | sed -e "s/\/emailAddress=.*//"
		echo "" # newline
		echo "Subject Alternative Name(s):"
		echo "" # newline
		echo "${certText}" | grep -A 1 "Subject Alternative Name:" |
			sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
		return 0
	else
		echo "ERROR: Certificate not found."
		return 1
	fi
}

# Normalize `open` across Linux, macOS, and Windows.
# This is needed to make the `o` function (see below) cross-platform.
if [ ! $(uname -s) = 'Darwin' ]; then
	if grep -q Microsoft /proc/version; then
		# Ubuntu on Windows using the Linux subsystem
		alias open='explorer.exe'
	else
		alias open='xdg-open'
	fi
fi

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .
	else
		open "$@"
	fi
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX
}

check_and_link_python() {
	# Check if python3 is available but python is not
	if command -v python3 &>/dev/null && ! command -v python &>/dev/null; then
		echo "We did not find 'python' on your command line so we will create a symlink from 'python3' to 'python'. Should we proceed? [y/N]"
		read -r response
		if [[ "$response" =~ ^[Yy]$ ]]; then
			sudo ln -s $(which python3) /usr/local/bin/python
		fi
	fi

	# Check if pip3 is available but pip is not
	if command -v pip3 &>/dev/null && ! command -v pip &>/dev/null; then
		echo "We did not find 'pip' on your command line so we will create a symlink from 'pip3' to 'pip'. Should we proceed? [y/N]"
		read -r response
		if [[ "$response" =~ ^[Yy]$ ]]; then
			sudo ln -s $(which pip3) /usr/local/bin/pip
		fi
	fi
}

#show the git root
gitroot() {
	git rev-parse --show-toplevel
}

#go to the git root
gitgoroot() {
	cd $(git rev-parse --show-toplevel)
}

#symbolicate crash
function desym {
	/Developer/Platforms/iPhoneOS.platform/Developer/Library/PrivateFrameworks/DTDeviceKit.framework/Versions/A/Resources/symbolicatecrash -A -v $1 | more
}

#quit apps
quit() {
	for app in $*; do
		osascript -e 'quit app "'$app'"'
	done
}

#show man in preview
pman() { man -t "${1}" | open -f -a Preview; }

#show machine information
function mach() {
	echo -e "\nMachine information:"
	uname -a
	echo -e "\nUsers logged on:"
	w -h
	echo -e "\nCurrent date :"
	date
	echo -e "\nMachine status :"
	uptime
	echo -e "\nMemory status :"
	free
	echo -e "\nFilesystem status :"
	df -h
}

#clear list files and go to bottom
function ll() {
	clear
	tput cup 0 0
	ls -Gla
	tput cup 40 0
}

#get all $PATH commands from file and them to the global $PATH
exportpaths() {
	cat $1 | grep -i "export path=" >temp.exports
	if [ -s temp.exports ]; then source temp.exports; fi
	rm temp.exports
}

#get meaning of a word from wikipedia
mwiki() {
	dig +short txt "$*".wp.dg.cx
}

# merge dotfiles from repo and home directory
mergedotfile() {
	set -x
	opendiff ~/"$1" $dotfiles/"$1" -merge $dotfiles/"$1"¬
	set +x
}
